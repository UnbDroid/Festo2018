// Generated by gencpp from file robotino_local_move/LocalMoveGoal.msg
// DO NOT EDIT!


#ifndef ROBOTINO_LOCAL_MOVE_MESSAGE_LOCALMOVEGOAL_H
#define ROBOTINO_LOCAL_MOVE_MESSAGE_LOCALMOVEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotino_local_move
{
template <class ContainerAllocator>
struct LocalMoveGoal_
{
  typedef LocalMoveGoal_<ContainerAllocator> Type;

  LocalMoveGoal_()
    : move_x(0.0)
    , move_y(0.0)
    , rotation(0.0)
    , ignore_rotation(false)  {
    }
  LocalMoveGoal_(const ContainerAllocator& _alloc)
    : move_x(0.0)
    , move_y(0.0)
    , rotation(0.0)
    , ignore_rotation(false)  {
    }



   typedef float _move_x_type;
  _move_x_type move_x;

   typedef float _move_y_type;
  _move_y_type move_y;

   typedef float _rotation_type;
  _rotation_type rotation;

   typedef uint8_t _ignore_rotation_type;
  _ignore_rotation_type ignore_rotation;




  typedef boost::shared_ptr< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LocalMoveGoal_

typedef ::robotino_local_move::LocalMoveGoal_<std::allocator<void> > LocalMoveGoal;

typedef boost::shared_ptr< ::robotino_local_move::LocalMoveGoal > LocalMoveGoalPtr;
typedef boost::shared_ptr< ::robotino_local_move::LocalMoveGoal const> LocalMoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robotino_local_move

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'robotino_local_move': ['/home/simon/catkin_ws/devel/share/robotino_local_move/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "366637325822a34a6134906628e5673b";
  }

  static const char* value(const ::robotino_local_move::LocalMoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x366637325822a34aULL;
  static const uint64_t static_value2 = 0x6134906628e5673bULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotino_local_move/LocalMoveGoal";
  }

  static const char* value(const ::robotino_local_move::LocalMoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
float32 move_x		# in meters\n\
float32 move_y		# in meters\n\
float32 rotation	# in rad\n\
bool ignore_rotation #if true robot is not rotated after moving. if false robot is rotated \"rotation\" relative to the starting orientation\n\
";
  }

  static const char* value(const ::robotino_local_move::LocalMoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_x);
      stream.next(m.move_y);
      stream.next(m.rotation);
      stream.next(m.ignore_rotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LocalMoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_local_move::LocalMoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotino_local_move::LocalMoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "move_x: ";
    Printer<float>::stream(s, indent + "  ", v.move_x);
    s << indent << "move_y: ";
    Printer<float>::stream(s, indent + "  ", v.move_y);
    s << indent << "rotation: ";
    Printer<float>::stream(s, indent + "  ", v.rotation);
    s << indent << "ignore_rotation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_rotation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_LOCAL_MOVE_MESSAGE_LOCALMOVEGOAL_H
